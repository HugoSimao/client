/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface CurriculumItemDTO
 */
export interface CurriculumItemDTO {
    /**
     * 
     * @type {number}
     * @memberof CurriculumItemDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CurriculumItemDTO
     */
    dataType: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurriculumItemDTO
     */
    mandatory?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CurriculumItemDTO
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof CurriculumItemDTO
     */
    studentUsername: string;
}

/**
 * 
 * @export
 * @interface CurriculumVitaeDTO
 */
export interface CurriculumVitaeDTO {
    /**
     * 
     * @type {number}
     * @memberof CurriculumVitaeDTO
     */
    id?: number;
    /**
     * 
     * @type {Array<CurriculumItemDTO>}
     * @memberof CurriculumVitaeDTO
     */
    cvItems: Array<CurriculumItemDTO>;
    /**
     * 
     * @type {string}
     * @memberof CurriculumVitaeDTO
     */
    studentUsername: string;
}

/**
 * 
 * @export
 * @interface DataItemAnswerDTO
 */
export interface DataItemAnswerDTO {
    /**
     * 
     * @type {number}
     * @memberof DataItemAnswerDTO
     */
    dataItemId: number;
    /**
     * 
     * @type {number}
     * @memberof DataItemAnswerDTO
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof DataItemAnswerDTO
     */
    studentUsername: string;
    /**
     * 
     * @type {string}
     * @memberof DataItemAnswerDTO
     */
    text: string;
}

/**
 * 
 * @export
 * @interface DataItemDTO
 */
export interface DataItemDTO {
    /**
     * 
     * @type {number}
     * @memberof DataItemDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof DataItemDTO
     */
    dataType: string;
    /**
     * 
     * @type {boolean}
     * @memberof DataItemDTO
     */
    mandatory?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DataItemDTO
     */
    grantID?: number;
    /**
     * 
     * @type {string}
     * @memberof DataItemDTO
     */
    sponsorUsername: string;
}

/**
 * 
 * @export
 * @interface EvaluationDTO
 */
export interface EvaluationDTO {
    /**
     * 
     * @type {boolean}
     * @memberof EvaluationDTO
     */
    accept: boolean;
    /**
     * 
     * @type {number}
     * @memberof EvaluationDTO
     */
    application: number;
    /**
     * 
     * @type {number}
     * @memberof EvaluationDTO
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof EvaluationDTO
     */
    leaderUsername: string;
    /**
     * 
     * @type {number}
     * @memberof EvaluationDTO
     */
    panelId: number;
}

/**
 * 
 * @export
 * @interface EvaluationPanelDTO
 */
export interface EvaluationPanelDTO {
    /**
     * 
     * @type {number}
     * @memberof EvaluationPanelDTO
     */
    grantId: number;
    /**
     * 
     * @type {number}
     * @memberof EvaluationPanelDTO
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof EvaluationPanelDTO
     */
    leaderId: number;
    /**
     * 
     * @type {Array<ReviewerDTO>}
     * @memberof EvaluationPanelDTO
     */
    membersId: Array<ReviewerDTO>;
    /**
     * 
     * @type {string}
     * @memberof EvaluationPanelDTO
     */
    sponsorUsername: string;
}

/**
 * 
 * @export
 * @interface GrantApplicationDTO
 */
export interface GrantApplicationDTO {
    /**
     * 
     * @type {Array<DataItemAnswerDTO>}
     * @memberof GrantApplicationDTO
     */
    answers: Array<DataItemAnswerDTO>;
    /**
     * 
     * @type {Date}
     * @memberof GrantApplicationDTO
     */
    date: Date;
    /**
     * 
     * @type {EvaluationDTO}
     * @memberof GrantApplicationDTO
     */
    evaluation: EvaluationDTO;
    /**
     * 
     * @type {number}
     * @memberof GrantApplicationDTO
     */
    grantCallId: number;
    /**
     * 
     * @type {number}
     * @memberof GrantApplicationDTO
     */
    id: number;
    /**
     * 
     * @type {Array<ReviewDTO>}
     * @memberof GrantApplicationDTO
     */
    reviews: Array<ReviewDTO>;
    /**
     * 
     * @type {number}
     * @memberof GrantApplicationDTO
     */
    studentId: number;
    /**
     * 
     * @type {string}
     * @memberof GrantApplicationDTO
     */
    studentUsername: string;
}

/**
 * 
 * @export
 * @interface GrantCallDTO
 */
export interface GrantCallDTO {
    /**
     * 
     * @type {number}
     * @memberof GrantCallDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof GrantCallDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof GrantCallDTO
     */
    requirements: string;
    /**
     * 
     * @type {string}
     * @memberof GrantCallDTO
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof GrantCallDTO
     */
    funding?: number;
    /**
     * 
     * @type {Date}
     * @memberof GrantCallDTO
     */
    openingDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof GrantCallDTO
     */
    closingDate: Date;
    /**
     * 
     * @type {Array<DataItemDTO>}
     * @memberof GrantCallDTO
     */
    dataItems: Array<DataItemDTO>;
    /**
     * 
     * @type {Array<GrantApplicationDTO>}
     * @memberof GrantCallDTO
     */
    applications: Array<GrantApplicationDTO>;
    /**
     * 
     * @type {string}
     * @memberof GrantCallDTO
     */
    sponsorUsername: string;
}

/**
 * 
 * @export
 * @interface InstitutionDTO
 */
export interface InstitutionDTO {
    /**
     * 
     * @type {number}
     * @memberof InstitutionDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof InstitutionDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof InstitutionDTO
     */
    contact: string;
    /**
     * 
     * @type {string}
     * @memberof InstitutionDTO
     */
    country: string;
    /**
     * 
     * @type {string}
     * @memberof InstitutionDTO
     */
    city: string;
    /**
     * 
     * @type {string}
     * @memberof InstitutionDTO
     */
    adminUsername: string;
}

/**
 * 
 * @export
 * @interface ModelAndView
 */
export interface ModelAndView {
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    empty?: boolean;
    /**
     * 
     * @type {any}
     * @memberof ModelAndView
     */
    model?: any;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ModelAndView
     */
    modelMap?: { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    reference?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    status?: ModelAndView.StatusEnum;
    /**
     * 
     * @type {View}
     * @memberof ModelAndView
     */
    view?: View;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    viewName?: string;
}

/**
 * @export
 * @namespace ModelAndView
 */
export namespace ModelAndView {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        _100CONTINUE = <any> '100 CONTINUE',
        _101SWITCHINGPROTOCOLS = <any> '101 SWITCHING_PROTOCOLS',
        _102PROCESSING = <any> '102 PROCESSING',
        _103CHECKPOINT = <any> '103 CHECKPOINT',
        _200OK = <any> '200 OK',
        _201CREATED = <any> '201 CREATED',
        _202ACCEPTED = <any> '202 ACCEPTED',
        _203NONAUTHORITATIVEINFORMATION = <any> '203 NON_AUTHORITATIVE_INFORMATION',
        _204NOCONTENT = <any> '204 NO_CONTENT',
        _205RESETCONTENT = <any> '205 RESET_CONTENT',
        _206PARTIALCONTENT = <any> '206 PARTIAL_CONTENT',
        _207MULTISTATUS = <any> '207 MULTI_STATUS',
        _208ALREADYREPORTED = <any> '208 ALREADY_REPORTED',
        _226IMUSED = <any> '226 IM_USED',
        _300MULTIPLECHOICES = <any> '300 MULTIPLE_CHOICES',
        _301MOVEDPERMANENTLY = <any> '301 MOVED_PERMANENTLY',
        _302FOUND = <any> '302 FOUND',
        _302MOVEDTEMPORARILY = <any> '302 MOVED_TEMPORARILY',
        _303SEEOTHER = <any> '303 SEE_OTHER',
        _304NOTMODIFIED = <any> '304 NOT_MODIFIED',
        _305USEPROXY = <any> '305 USE_PROXY',
        _307TEMPORARYREDIRECT = <any> '307 TEMPORARY_REDIRECT',
        _308PERMANENTREDIRECT = <any> '308 PERMANENT_REDIRECT',
        _400BADREQUEST = <any> '400 BAD_REQUEST',
        _401UNAUTHORIZED = <any> '401 UNAUTHORIZED',
        _402PAYMENTREQUIRED = <any> '402 PAYMENT_REQUIRED',
        _403FORBIDDEN = <any> '403 FORBIDDEN',
        _404NOTFOUND = <any> '404 NOT_FOUND',
        _405METHODNOTALLOWED = <any> '405 METHOD_NOT_ALLOWED',
        _406NOTACCEPTABLE = <any> '406 NOT_ACCEPTABLE',
        _407PROXYAUTHENTICATIONREQUIRED = <any> '407 PROXY_AUTHENTICATION_REQUIRED',
        _408REQUESTTIMEOUT = <any> '408 REQUEST_TIMEOUT',
        _409CONFLICT = <any> '409 CONFLICT',
        _410GONE = <any> '410 GONE',
        _411LENGTHREQUIRED = <any> '411 LENGTH_REQUIRED',
        _412PRECONDITIONFAILED = <any> '412 PRECONDITION_FAILED',
        _413PAYLOADTOOLARGE = <any> '413 PAYLOAD_TOO_LARGE',
        _413REQUESTENTITYTOOLARGE = <any> '413 REQUEST_ENTITY_TOO_LARGE',
        _414URITOOLONG = <any> '414 URI_TOO_LONG',
        _414REQUESTURITOOLONG = <any> '414 REQUEST_URI_TOO_LONG',
        _415UNSUPPORTEDMEDIATYPE = <any> '415 UNSUPPORTED_MEDIA_TYPE',
        _416REQUESTEDRANGENOTSATISFIABLE = <any> '416 REQUESTED_RANGE_NOT_SATISFIABLE',
        _417EXPECTATIONFAILED = <any> '417 EXPECTATION_FAILED',
        _418IAMATEAPOT = <any> '418 I_AM_A_TEAPOT',
        _419INSUFFICIENTSPACEONRESOURCE = <any> '419 INSUFFICIENT_SPACE_ON_RESOURCE',
        _420METHODFAILURE = <any> '420 METHOD_FAILURE',
        _421DESTINATIONLOCKED = <any> '421 DESTINATION_LOCKED',
        _422UNPROCESSABLEENTITY = <any> '422 UNPROCESSABLE_ENTITY',
        _423LOCKED = <any> '423 LOCKED',
        _424FAILEDDEPENDENCY = <any> '424 FAILED_DEPENDENCY',
        _425TOOEARLY = <any> '425 TOO_EARLY',
        _426UPGRADEREQUIRED = <any> '426 UPGRADE_REQUIRED',
        _428PRECONDITIONREQUIRED = <any> '428 PRECONDITION_REQUIRED',
        _429TOOMANYREQUESTS = <any> '429 TOO_MANY_REQUESTS',
        _431REQUESTHEADERFIELDSTOOLARGE = <any> '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
        _451UNAVAILABLEFORLEGALREASONS = <any> '451 UNAVAILABLE_FOR_LEGAL_REASONS',
        _500INTERNALSERVERERROR = <any> '500 INTERNAL_SERVER_ERROR',
        _501NOTIMPLEMENTED = <any> '501 NOT_IMPLEMENTED',
        _502BADGATEWAY = <any> '502 BAD_GATEWAY',
        _503SERVICEUNAVAILABLE = <any> '503 SERVICE_UNAVAILABLE',
        _504GATEWAYTIMEOUT = <any> '504 GATEWAY_TIMEOUT',
        _505HTTPVERSIONNOTSUPPORTED = <any> '505 HTTP_VERSION_NOT_SUPPORTED',
        _506VARIANTALSONEGOTIATES = <any> '506 VARIANT_ALSO_NEGOTIATES',
        _507INSUFFICIENTSTORAGE = <any> '507 INSUFFICIENT_STORAGE',
        _508LOOPDETECTED = <any> '508 LOOP_DETECTED',
        _509BANDWIDTHLIMITEXCEEDED = <any> '509 BANDWIDTH_LIMIT_EXCEEDED',
        _510NOTEXTENDED = <any> '510 NOT_EXTENDED',
        _511NETWORKAUTHENTICATIONREQUIRED = <any> '511 NETWORK_AUTHENTICATION_REQUIRED'
    }
}

/**
 * 
 * @export
 * @interface PersonDTO
 */
export interface PersonDTO {
    /**
     * 
     * @type {number}
     * @memberof PersonDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PersonDTO
     */
    name: string;
    /**
     * 
     * @type {Date}
     * @memberof PersonDTO
     */
    birthday: Date;
    /**
     * 
     * @type {string}
     * @memberof PersonDTO
     */
    gender?: string;
    /**
     * 
     * @type {InstitutionDTO}
     * @memberof PersonDTO
     */
    institutionID: InstitutionDTO;
    /**
     * 
     * @type {string}
     * @memberof PersonDTO
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDTO
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDTO
     */
    personUsername: string;
}

/**
 * 
 * @export
 * @interface ReviewDTO
 */
export interface ReviewDTO {
    /**
     * 
     * @type {number}
     * @memberof ReviewDTO
     */
    applicationId: number;
    /**
     * 
     * @type {number}
     * @memberof ReviewDTO
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ReviewDTO
     */
    review: string;
    /**
     * 
     * @type {number}
     * @memberof ReviewDTO
     */
    reviewerId: number;
    /**
     * 
     * @type {string}
     * @memberof ReviewDTO
     */
    reviewerUsername: string;
}

/**
 * 
 * @export
 * @interface ReviewerDTO
 */
export interface ReviewerDTO {
    /**
     * 
     * @type {string}
     * @memberof ReviewerDTO
     */
    area: string;
    /**
     * 
     * @type {number}
     * @memberof ReviewerDTO
     */
    id: number;
    /**
     * 
     * @type {PersonDTO}
     * @memberof ReviewerDTO
     */
    personDto: PersonDTO;
    /**
     * 
     * @type {string}
     * @memberof ReviewerDTO
     */
    reviewerUsername: string;
    /**
     * 
     * @type {Array<ReviewDTO>}
     * @memberof ReviewerDTO
     */
    reviews: Array<ReviewDTO>;
}

/**
 * 
 * @export
 * @interface SponsorDTO
 */
export interface SponsorDTO {
    /**
     * 
     * @type {number}
     * @memberof SponsorDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SponsorDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof SponsorDTO
     */
    contact: string;
    /**
     * 
     * @type {Array<GrantCallDTO>}
     * @memberof SponsorDTO
     */
    calls: Array<GrantCallDTO>;
    /**
     * 
     * @type {string}
     * @memberof SponsorDTO
     */
    sponsorUsername: string;
}

/**
 * 
 * @export
 * @interface StudentDTO
 */
export interface StudentDTO {
    /**
     * 
     * @type {number}
     * @memberof StudentDTO
     */
    id?: number;
    /**
     * 
     * @type {PersonDTO}
     * @memberof StudentDTO
     */
    personDto: PersonDTO;
    /**
     * 
     * @type {number}
     * @memberof StudentDTO
     */
    year?: number;
    /**
     * 
     * @type {CurriculumVitaeDTO}
     * @memberof StudentDTO
     */
    cv: CurriculumVitaeDTO;
    /**
     * 
     * @type {string}
     * @memberof StudentDTO
     */
    studentUsername: string;
}

/**
 * 
 * @export
 * @interface View
 */
export interface View {
    /**
     * 
     * @type {string}
     * @memberof View
     */
    contentType?: string;
}


/**
 * BasicErrorControllerApi - fetch parameter creator
 * @export
 */
export const BasicErrorControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'HEAD' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
export const BasicErrorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingDELETE(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingHEAD(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingOPTIONS(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPATCH(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPOST(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPUT(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
export const BasicErrorControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingDELETE(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingHEAD(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingOPTIONS(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPATCH(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPOST(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPUT(options)(fetch, basePath);
        },
    };
};

/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
export class BasicErrorControllerApi extends BaseAPI {
    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingDELETE(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingDELETE(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingGET(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingHEAD(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingHEAD(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingOPTIONS(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingOPTIONS(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPATCH(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPATCH(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPOST(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPOST(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPUT(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPUT(options)(this.fetch, this.basePath);
    }

}

/**
 * CurriculumItemControllerApi - fetch parameter creator
 * @export
 */
export const CurriculumItemControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a cv item
         * @param {CurriculumItemDTO} cvItem cvItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCvItemUsingPOST(cvItem: CurriculumItemDTO, options: any = {}): FetchArgs {
            // verify required parameter 'cvItem' is not null or undefined
            if (cvItem === null || cvItem === undefined) {
                throw new RequiredError('cvItem','Required parameter cvItem was null or undefined when calling addCvItemUsingPOST.');
            }
            const localVarPath = `/cvItem`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CurriculumItemDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cvItem || {}) : (cvItem || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a cv item with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCvItemUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCvItemUsingDELETE.');
            }
            const localVarPath = `/cvItem/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all cv items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/cvItem`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a cv item with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET.');
            }
            const localVarPath = `/cvItem/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a cv item with a given id
         * @param {CurriculumItemDTO} cvItem cvItem
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCvItemUsingPUT(cvItem: CurriculumItemDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'cvItem' is not null or undefined
            if (cvItem === null || cvItem === undefined) {
                throw new RequiredError('cvItem','Required parameter cvItem was null or undefined when calling updateCvItemUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateCvItemUsingPUT.');
            }
            const localVarPath = `/cvItem/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CurriculumItemDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cvItem || {}) : (cvItem || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CurriculumItemControllerApi - functional programming interface
 * @export
 */
export const CurriculumItemControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a cv item
         * @param {CurriculumItemDTO} cvItem cvItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCvItemUsingPOST(cvItem: CurriculumItemDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CurriculumItemDTO> {
            const localVarFetchArgs = CurriculumItemControllerApiFetchParamCreator(configuration).addCvItemUsingPOST(cvItem, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a cv item with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCvItemUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CurriculumItemControllerApiFetchParamCreator(configuration).deleteCvItemUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the list of all cv items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<CurriculumItemDTO>> {
            const localVarFetchArgs = CurriculumItemControllerApiFetchParamCreator(configuration).getAllUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a cv item with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CurriculumItemDTO> {
            const localVarFetchArgs = CurriculumItemControllerApiFetchParamCreator(configuration).getOneUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a cv item with a given id
         * @param {CurriculumItemDTO} cvItem cvItem
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCvItemUsingPUT(cvItem: CurriculumItemDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CurriculumItemDTO> {
            const localVarFetchArgs = CurriculumItemControllerApiFetchParamCreator(configuration).updateCvItemUsingPUT(cvItem, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CurriculumItemControllerApi - factory interface
 * @export
 */
export const CurriculumItemControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Creates a cv item
         * @param {CurriculumItemDTO} cvItem cvItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCvItemUsingPOST(cvItem: CurriculumItemDTO, options?: any) {
            return CurriculumItemControllerApiFp(configuration).addCvItemUsingPOST(cvItem, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a cv item with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCvItemUsingDELETE(id: number, options?: any) {
            return CurriculumItemControllerApiFp(configuration).deleteCvItemUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the list of all cv items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET(options?: any) {
            return CurriculumItemControllerApiFp(configuration).getAllUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a cv item with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET(id: number, options?: any) {
            return CurriculumItemControllerApiFp(configuration).getOneUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a cv item with a given id
         * @param {CurriculumItemDTO} cvItem cvItem
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCvItemUsingPUT(cvItem: CurriculumItemDTO, id: number, options?: any) {
            return CurriculumItemControllerApiFp(configuration).updateCvItemUsingPUT(cvItem, id, options)(fetch, basePath);
        },
    };
};

/**
 * CurriculumItemControllerApi - object-oriented interface
 * @export
 * @class CurriculumItemControllerApi
 * @extends {BaseAPI}
 */
export class CurriculumItemControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a cv item
     * @param {CurriculumItemDTO} cvItem cvItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurriculumItemControllerApi
     */
    public addCvItemUsingPOST(cvItem: CurriculumItemDTO, options?: any) {
        return CurriculumItemControllerApiFp(this.configuration).addCvItemUsingPOST(cvItem, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a cv item with a given id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurriculumItemControllerApi
     */
    public deleteCvItemUsingDELETE(id: number, options?: any) {
        return CurriculumItemControllerApiFp(this.configuration).deleteCvItemUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the list of all cv items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurriculumItemControllerApi
     */
    public getAllUsingGET(options?: any) {
        return CurriculumItemControllerApiFp(this.configuration).getAllUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a cv item with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurriculumItemControllerApi
     */
    public getOneUsingGET(id: number, options?: any) {
        return CurriculumItemControllerApiFp(this.configuration).getOneUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a cv item with a given id
     * @param {CurriculumItemDTO} cvItem cvItem
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurriculumItemControllerApi
     */
    public updateCvItemUsingPUT(cvItem: CurriculumItemDTO, id: number, options?: any) {
        return CurriculumItemControllerApiFp(this.configuration).updateCvItemUsingPUT(cvItem, id, options)(this.fetch, this.basePath);
    }

}

/**
 * CurriculumVitaeControllerApi - fetch parameter creator
 * @export
 */
export const CurriculumVitaeControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a cv
         * @param {CurriculumVitaeDTO} cv cv
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCVUsingPOST(cv: CurriculumVitaeDTO, options: any = {}): FetchArgs {
            // verify required parameter 'cv' is not null or undefined
            if (cv === null || cv === undefined) {
                throw new RequiredError('cv','Required parameter cv was null or undefined when calling addCVUsingPOST.');
            }
            const localVarPath = `/curriculum`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CurriculumVitaeDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cv || {}) : (cv || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a cv with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCVUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCVUsingDELETE.');
            }
            const localVarPath = `/curriculum/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all cvs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET1(options: any = {}): FetchArgs {
            const localVarPath = `/curriculum`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the items of a cv with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCVItemsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCVItemsUsingGET.');
            }
            const localVarPath = `/curriculum/{id}/cvItems`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a cv with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET1(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET1.');
            }
            const localVarPath = `/curriculum/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a cv with a given id
         * @param {CurriculumVitaeDTO} cv cv
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCVUsingPUT(cv: CurriculumVitaeDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'cv' is not null or undefined
            if (cv === null || cv === undefined) {
                throw new RequiredError('cv','Required parameter cv was null or undefined when calling updateCVUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateCVUsingPUT.');
            }
            const localVarPath = `/curriculum/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CurriculumVitaeDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cv || {}) : (cv || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CurriculumVitaeControllerApi - functional programming interface
 * @export
 */
export const CurriculumVitaeControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a cv
         * @param {CurriculumVitaeDTO} cv cv
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCVUsingPOST(cv: CurriculumVitaeDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CurriculumVitaeDTO> {
            const localVarFetchArgs = CurriculumVitaeControllerApiFetchParamCreator(configuration).addCVUsingPOST(cv, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a cv with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCVUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CurriculumVitaeControllerApiFetchParamCreator(configuration).deleteCVUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the list of all cvs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET1(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<CurriculumVitaeDTO>> {
            const localVarFetchArgs = CurriculumVitaeControllerApiFetchParamCreator(configuration).getAllUsingGET1(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the items of a cv with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCVItemsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<CurriculumItemDTO>> {
            const localVarFetchArgs = CurriculumVitaeControllerApiFetchParamCreator(configuration).getCVItemsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a cv with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET1(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CurriculumVitaeDTO> {
            const localVarFetchArgs = CurriculumVitaeControllerApiFetchParamCreator(configuration).getOneUsingGET1(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a cv with a given id
         * @param {CurriculumVitaeDTO} cv cv
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCVUsingPUT(cv: CurriculumVitaeDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CurriculumVitaeDTO> {
            const localVarFetchArgs = CurriculumVitaeControllerApiFetchParamCreator(configuration).updateCVUsingPUT(cv, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CurriculumVitaeControllerApi - factory interface
 * @export
 */
export const CurriculumVitaeControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Creates a cv
         * @param {CurriculumVitaeDTO} cv cv
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCVUsingPOST(cv: CurriculumVitaeDTO, options?: any) {
            return CurriculumVitaeControllerApiFp(configuration).addCVUsingPOST(cv, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a cv with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCVUsingDELETE(id: number, options?: any) {
            return CurriculumVitaeControllerApiFp(configuration).deleteCVUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the list of all cvs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET1(options?: any) {
            return CurriculumVitaeControllerApiFp(configuration).getAllUsingGET1(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the items of a cv with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCVItemsUsingGET(id: number, options?: any) {
            return CurriculumVitaeControllerApiFp(configuration).getCVItemsUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a cv with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET1(id: number, options?: any) {
            return CurriculumVitaeControllerApiFp(configuration).getOneUsingGET1(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a cv with a given id
         * @param {CurriculumVitaeDTO} cv cv
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCVUsingPUT(cv: CurriculumVitaeDTO, id: number, options?: any) {
            return CurriculumVitaeControllerApiFp(configuration).updateCVUsingPUT(cv, id, options)(fetch, basePath);
        },
    };
};

/**
 * CurriculumVitaeControllerApi - object-oriented interface
 * @export
 * @class CurriculumVitaeControllerApi
 * @extends {BaseAPI}
 */
export class CurriculumVitaeControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a cv
     * @param {CurriculumVitaeDTO} cv cv
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurriculumVitaeControllerApi
     */
    public addCVUsingPOST(cv: CurriculumVitaeDTO, options?: any) {
        return CurriculumVitaeControllerApiFp(this.configuration).addCVUsingPOST(cv, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a cv with a given id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurriculumVitaeControllerApi
     */
    public deleteCVUsingDELETE(id: number, options?: any) {
        return CurriculumVitaeControllerApiFp(this.configuration).deleteCVUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the list of all cvs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurriculumVitaeControllerApi
     */
    public getAllUsingGET1(options?: any) {
        return CurriculumVitaeControllerApiFp(this.configuration).getAllUsingGET1(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the items of a cv with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurriculumVitaeControllerApi
     */
    public getCVItemsUsingGET(id: number, options?: any) {
        return CurriculumVitaeControllerApiFp(this.configuration).getCVItemsUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a cv with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurriculumVitaeControllerApi
     */
    public getOneUsingGET1(id: number, options?: any) {
        return CurriculumVitaeControllerApiFp(this.configuration).getOneUsingGET1(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a cv with a given id
     * @param {CurriculumVitaeDTO} cv cv
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurriculumVitaeControllerApi
     */
    public updateCVUsingPUT(cv: CurriculumVitaeDTO, id: number, options?: any) {
        return CurriculumVitaeControllerApiFp(this.configuration).updateCVUsingPUT(cv, id, options)(this.fetch, this.basePath);
    }

}

/**
 * DataItemAnswerControllerApi - fetch parameter creator
 * @export
 */
export const DataItemAnswerControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a data item
         * @param {DataItemAnswerDTO} dataItem dataItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDataItemAnswerUsingPOST(dataItem: DataItemAnswerDTO, options: any = {}): FetchArgs {
            // verify required parameter 'dataItem' is not null or undefined
            if (dataItem === null || dataItem === undefined) {
                throw new RequiredError('dataItem','Required parameter dataItem was null or undefined when calling addDataItemAnswerUsingPOST.');
            }
            const localVarPath = `/dataItemAnswer`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DataItemAnswerDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(dataItem || {}) : (dataItem || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a data item with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataItemAnswerUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteDataItemAnswerUsingDELETE.');
            }
            const localVarPath = `/dataItemAnswer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all data item answers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET2(options: any = {}): FetchArgs {
            const localVarPath = `/dataItemAnswer`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a data item with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET2(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET2.');
            }
            const localVarPath = `/dataItemAnswer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a data item with a given id
         * @param {DataItemAnswerDTO} dataItem dataItem
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataItemAnswerUsingPUT(dataItem: DataItemAnswerDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'dataItem' is not null or undefined
            if (dataItem === null || dataItem === undefined) {
                throw new RequiredError('dataItem','Required parameter dataItem was null or undefined when calling updateDataItemAnswerUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateDataItemAnswerUsingPUT.');
            }
            const localVarPath = `/dataItemAnswer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DataItemAnswerDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(dataItem || {}) : (dataItem || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataItemAnswerControllerApi - functional programming interface
 * @export
 */
export const DataItemAnswerControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a data item
         * @param {DataItemAnswerDTO} dataItem dataItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDataItemAnswerUsingPOST(dataItem: DataItemAnswerDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DataItemAnswerDTO> {
            const localVarFetchArgs = DataItemAnswerControllerApiFetchParamCreator(configuration).addDataItemAnswerUsingPOST(dataItem, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a data item with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataItemAnswerUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DataItemAnswerControllerApiFetchParamCreator(configuration).deleteDataItemAnswerUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the list of all data item answers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET2(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DataItemAnswerDTO>> {
            const localVarFetchArgs = DataItemAnswerControllerApiFetchParamCreator(configuration).getAllUsingGET2(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a data item with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET2(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DataItemAnswerDTO> {
            const localVarFetchArgs = DataItemAnswerControllerApiFetchParamCreator(configuration).getOneUsingGET2(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a data item with a given id
         * @param {DataItemAnswerDTO} dataItem dataItem
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataItemAnswerUsingPUT(dataItem: DataItemAnswerDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DataItemAnswerDTO> {
            const localVarFetchArgs = DataItemAnswerControllerApiFetchParamCreator(configuration).updateDataItemAnswerUsingPUT(dataItem, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DataItemAnswerControllerApi - factory interface
 * @export
 */
export const DataItemAnswerControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Creates a data item
         * @param {DataItemAnswerDTO} dataItem dataItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDataItemAnswerUsingPOST(dataItem: DataItemAnswerDTO, options?: any) {
            return DataItemAnswerControllerApiFp(configuration).addDataItemAnswerUsingPOST(dataItem, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a data item with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataItemAnswerUsingDELETE(id: number, options?: any) {
            return DataItemAnswerControllerApiFp(configuration).deleteDataItemAnswerUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the list of all data item answers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET2(options?: any) {
            return DataItemAnswerControllerApiFp(configuration).getAllUsingGET2(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a data item with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET2(id: number, options?: any) {
            return DataItemAnswerControllerApiFp(configuration).getOneUsingGET2(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a data item with a given id
         * @param {DataItemAnswerDTO} dataItem dataItem
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataItemAnswerUsingPUT(dataItem: DataItemAnswerDTO, id: number, options?: any) {
            return DataItemAnswerControllerApiFp(configuration).updateDataItemAnswerUsingPUT(dataItem, id, options)(fetch, basePath);
        },
    };
};

/**
 * DataItemAnswerControllerApi - object-oriented interface
 * @export
 * @class DataItemAnswerControllerApi
 * @extends {BaseAPI}
 */
export class DataItemAnswerControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a data item
     * @param {DataItemAnswerDTO} dataItem dataItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataItemAnswerControllerApi
     */
    public addDataItemAnswerUsingPOST(dataItem: DataItemAnswerDTO, options?: any) {
        return DataItemAnswerControllerApiFp(this.configuration).addDataItemAnswerUsingPOST(dataItem, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a data item with a given id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataItemAnswerControllerApi
     */
    public deleteDataItemAnswerUsingDELETE(id: number, options?: any) {
        return DataItemAnswerControllerApiFp(this.configuration).deleteDataItemAnswerUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the list of all data item answers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataItemAnswerControllerApi
     */
    public getAllUsingGET2(options?: any) {
        return DataItemAnswerControllerApiFp(this.configuration).getAllUsingGET2(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a data item with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataItemAnswerControllerApi
     */
    public getOneUsingGET2(id: number, options?: any) {
        return DataItemAnswerControllerApiFp(this.configuration).getOneUsingGET2(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a data item with a given id
     * @param {DataItemAnswerDTO} dataItem dataItem
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataItemAnswerControllerApi
     */
    public updateDataItemAnswerUsingPUT(dataItem: DataItemAnswerDTO, id: number, options?: any) {
        return DataItemAnswerControllerApiFp(this.configuration).updateDataItemAnswerUsingPUT(dataItem, id, options)(this.fetch, this.basePath);
    }

}

/**
 * DataItemControllerApi - fetch parameter creator
 * @export
 */
export const DataItemControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a data item
         * @param {DataItemDTO} dataItem dataItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDataItemUsingPOST(dataItem: DataItemDTO, options: any = {}): FetchArgs {
            // verify required parameter 'dataItem' is not null or undefined
            if (dataItem === null || dataItem === undefined) {
                throw new RequiredError('dataItem','Required parameter dataItem was null or undefined when calling addDataItemUsingPOST.');
            }
            const localVarPath = `/dataItem`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DataItemDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(dataItem || {}) : (dataItem || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a data item with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataItemUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteDataItemUsingDELETE.');
            }
            const localVarPath = `/dataItem/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all data items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET3(options: any = {}): FetchArgs {
            const localVarPath = `/dataItem`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a data item with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET3(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET3.');
            }
            const localVarPath = `/dataItem/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a data item with a given id
         * @param {DataItemDTO} dataItem dataItem
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataItemUsingPUT(dataItem: DataItemDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'dataItem' is not null or undefined
            if (dataItem === null || dataItem === undefined) {
                throw new RequiredError('dataItem','Required parameter dataItem was null or undefined when calling updateDataItemUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateDataItemUsingPUT.');
            }
            const localVarPath = `/dataItem/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DataItemDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(dataItem || {}) : (dataItem || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataItemControllerApi - functional programming interface
 * @export
 */
export const DataItemControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a data item
         * @param {DataItemDTO} dataItem dataItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDataItemUsingPOST(dataItem: DataItemDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DataItemDTO> {
            const localVarFetchArgs = DataItemControllerApiFetchParamCreator(configuration).addDataItemUsingPOST(dataItem, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a data item with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataItemUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DataItemControllerApiFetchParamCreator(configuration).deleteDataItemUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the list of all data items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET3(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DataItemDTO>> {
            const localVarFetchArgs = DataItemControllerApiFetchParamCreator(configuration).getAllUsingGET3(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a data item with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET3(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DataItemDTO> {
            const localVarFetchArgs = DataItemControllerApiFetchParamCreator(configuration).getOneUsingGET3(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a data item with a given id
         * @param {DataItemDTO} dataItem dataItem
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataItemUsingPUT(dataItem: DataItemDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DataItemDTO> {
            const localVarFetchArgs = DataItemControllerApiFetchParamCreator(configuration).updateDataItemUsingPUT(dataItem, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DataItemControllerApi - factory interface
 * @export
 */
export const DataItemControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Creates a data item
         * @param {DataItemDTO} dataItem dataItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDataItemUsingPOST(dataItem: DataItemDTO, options?: any) {
            return DataItemControllerApiFp(configuration).addDataItemUsingPOST(dataItem, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a data item with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataItemUsingDELETE(id: number, options?: any) {
            return DataItemControllerApiFp(configuration).deleteDataItemUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the list of all data items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET3(options?: any) {
            return DataItemControllerApiFp(configuration).getAllUsingGET3(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a data item with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET3(id: number, options?: any) {
            return DataItemControllerApiFp(configuration).getOneUsingGET3(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a data item with a given id
         * @param {DataItemDTO} dataItem dataItem
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataItemUsingPUT(dataItem: DataItemDTO, id: number, options?: any) {
            return DataItemControllerApiFp(configuration).updateDataItemUsingPUT(dataItem, id, options)(fetch, basePath);
        },
    };
};

/**
 * DataItemControllerApi - object-oriented interface
 * @export
 * @class DataItemControllerApi
 * @extends {BaseAPI}
 */
export class DataItemControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a data item
     * @param {DataItemDTO} dataItem dataItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataItemControllerApi
     */
    public addDataItemUsingPOST(dataItem: DataItemDTO, options?: any) {
        return DataItemControllerApiFp(this.configuration).addDataItemUsingPOST(dataItem, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a data item with a given id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataItemControllerApi
     */
    public deleteDataItemUsingDELETE(id: number, options?: any) {
        return DataItemControllerApiFp(this.configuration).deleteDataItemUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the list of all data items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataItemControllerApi
     */
    public getAllUsingGET3(options?: any) {
        return DataItemControllerApiFp(this.configuration).getAllUsingGET3(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a data item with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataItemControllerApi
     */
    public getOneUsingGET3(id: number, options?: any) {
        return DataItemControllerApiFp(this.configuration).getOneUsingGET3(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a data item with a given id
     * @param {DataItemDTO} dataItem dataItem
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataItemControllerApi
     */
    public updateDataItemUsingPUT(dataItem: DataItemDTO, id: number, options?: any) {
        return DataItemControllerApiFp(this.configuration).updateDataItemUsingPUT(dataItem, id, options)(this.fetch, this.basePath);
    }

}

/**
 * EvaluationControllerApi - fetch parameter creator
 * @export
 */
export const EvaluationControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a evaluation
         * @param {EvaluationDTO} evaluation evaluation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvaluationUsingPOST(evaluation: EvaluationDTO, options: any = {}): FetchArgs {
            // verify required parameter 'evaluation' is not null or undefined
            if (evaluation === null || evaluation === undefined) {
                throw new RequiredError('evaluation','Required parameter evaluation was null or undefined when calling addEvaluationUsingPOST.');
            }
            const localVarPath = `/evaluation`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EvaluationDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(evaluation || {}) : (evaluation || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a evaluation with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvaluationUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteEvaluationUsingDELETE.');
            }
            const localVarPath = `/evaluation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all evaluations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET4(options: any = {}): FetchArgs {
            const localVarPath = `/evaluation`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an application of an evaluation with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getApplicationUsingGET.');
            }
            const localVarPath = `/evaluation/{id}/application`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an evaluation with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET4(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET4.');
            }
            const localVarPath = `/evaluation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a evaluation with a given id
         * @param {EvaluationDTO} evaluation evaluation
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvaluationUsingPUT(evaluation: EvaluationDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'evaluation' is not null or undefined
            if (evaluation === null || evaluation === undefined) {
                throw new RequiredError('evaluation','Required parameter evaluation was null or undefined when calling updateEvaluationUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateEvaluationUsingPUT.');
            }
            const localVarPath = `/evaluation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EvaluationDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(evaluation || {}) : (evaluation || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EvaluationControllerApi - functional programming interface
 * @export
 */
export const EvaluationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a evaluation
         * @param {EvaluationDTO} evaluation evaluation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvaluationUsingPOST(evaluation: EvaluationDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EvaluationDTO> {
            const localVarFetchArgs = EvaluationControllerApiFetchParamCreator(configuration).addEvaluationUsingPOST(evaluation, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a evaluation with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvaluationUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EvaluationControllerApiFetchParamCreator(configuration).deleteEvaluationUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the list of all evaluations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET4(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<EvaluationDTO>> {
            const localVarFetchArgs = EvaluationControllerApiFetchParamCreator(configuration).getAllUsingGET4(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get an application of an evaluation with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GrantApplicationDTO> {
            const localVarFetchArgs = EvaluationControllerApiFetchParamCreator(configuration).getApplicationUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get an evaluation with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET4(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EvaluationDTO> {
            const localVarFetchArgs = EvaluationControllerApiFetchParamCreator(configuration).getOneUsingGET4(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a evaluation with a given id
         * @param {EvaluationDTO} evaluation evaluation
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvaluationUsingPUT(evaluation: EvaluationDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EvaluationDTO> {
            const localVarFetchArgs = EvaluationControllerApiFetchParamCreator(configuration).updateEvaluationUsingPUT(evaluation, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EvaluationControllerApi - factory interface
 * @export
 */
export const EvaluationControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Creates a evaluation
         * @param {EvaluationDTO} evaluation evaluation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvaluationUsingPOST(evaluation: EvaluationDTO, options?: any) {
            return EvaluationControllerApiFp(configuration).addEvaluationUsingPOST(evaluation, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a evaluation with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvaluationUsingDELETE(id: number, options?: any) {
            return EvaluationControllerApiFp(configuration).deleteEvaluationUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the list of all evaluations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET4(options?: any) {
            return EvaluationControllerApiFp(configuration).getAllUsingGET4(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get an application of an evaluation with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationUsingGET(id: number, options?: any) {
            return EvaluationControllerApiFp(configuration).getApplicationUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get an evaluation with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET4(id: number, options?: any) {
            return EvaluationControllerApiFp(configuration).getOneUsingGET4(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a evaluation with a given id
         * @param {EvaluationDTO} evaluation evaluation
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvaluationUsingPUT(evaluation: EvaluationDTO, id: number, options?: any) {
            return EvaluationControllerApiFp(configuration).updateEvaluationUsingPUT(evaluation, id, options)(fetch, basePath);
        },
    };
};

/**
 * EvaluationControllerApi - object-oriented interface
 * @export
 * @class EvaluationControllerApi
 * @extends {BaseAPI}
 */
export class EvaluationControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a evaluation
     * @param {EvaluationDTO} evaluation evaluation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationControllerApi
     */
    public addEvaluationUsingPOST(evaluation: EvaluationDTO, options?: any) {
        return EvaluationControllerApiFp(this.configuration).addEvaluationUsingPOST(evaluation, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a evaluation with a given id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationControllerApi
     */
    public deleteEvaluationUsingDELETE(id: number, options?: any) {
        return EvaluationControllerApiFp(this.configuration).deleteEvaluationUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the list of all evaluations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationControllerApi
     */
    public getAllUsingGET4(options?: any) {
        return EvaluationControllerApiFp(this.configuration).getAllUsingGET4(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get an application of an evaluation with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationControllerApi
     */
    public getApplicationUsingGET(id: number, options?: any) {
        return EvaluationControllerApiFp(this.configuration).getApplicationUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get an evaluation with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationControllerApi
     */
    public getOneUsingGET4(id: number, options?: any) {
        return EvaluationControllerApiFp(this.configuration).getOneUsingGET4(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a evaluation with a given id
     * @param {EvaluationDTO} evaluation evaluation
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationControllerApi
     */
    public updateEvaluationUsingPUT(evaluation: EvaluationDTO, id: number, options?: any) {
        return EvaluationControllerApiFp(this.configuration).updateEvaluationUsingPUT(evaluation, id, options)(this.fetch, this.basePath);
    }

}

/**
 * EvaluationPanelControllerApi - fetch parameter creator
 * @export
 */
export const EvaluationPanelControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a evaluation panel
         * @param {EvaluationPanelDTO} evaluation evaluation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvaluationPanelUsingPOST(evaluation: EvaluationPanelDTO, options: any = {}): FetchArgs {
            // verify required parameter 'evaluation' is not null or undefined
            if (evaluation === null || evaluation === undefined) {
                throw new RequiredError('evaluation','Required parameter evaluation was null or undefined when calling addEvaluationPanelUsingPOST.');
            }
            const localVarPath = `/evaluationPanel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EvaluationPanelDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(evaluation || {}) : (evaluation || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a evaluation panel with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvaluationPanelUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteEvaluationPanelUsingDELETE.');
            }
            const localVarPath = `/evaluationPanel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all evaluation panels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET5(options: any = {}): FetchArgs {
            const localVarPath = `/evaluationPanel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the panel chair of an evaluation panel with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChairUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getChairUsingGET.');
            }
            const localVarPath = `/evaluationPanel/{id}/chair`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the evaluations of an evaluation panel with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvaluationsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getEvaluationsUsingGET.');
            }
            const localVarPath = `/evaluationPanel/{id}/evaluations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a evaluation panel with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET5(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET5.');
            }
            const localVarPath = `/evaluationPanel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the reviewers of a evaluation panel with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewersUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getReviewersUsingGET.');
            }
            const localVarPath = `/evaluationPanel/{id}/reviewers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a evaluation panel with a given id
         * @param {EvaluationPanelDTO} evaluation evaluation
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvaluationPanelUsingPUT(evaluation: EvaluationPanelDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'evaluation' is not null or undefined
            if (evaluation === null || evaluation === undefined) {
                throw new RequiredError('evaluation','Required parameter evaluation was null or undefined when calling updateEvaluationPanelUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateEvaluationPanelUsingPUT.');
            }
            const localVarPath = `/evaluationPanel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EvaluationPanelDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(evaluation || {}) : (evaluation || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EvaluationPanelControllerApi - functional programming interface
 * @export
 */
export const EvaluationPanelControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a evaluation panel
         * @param {EvaluationPanelDTO} evaluation evaluation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvaluationPanelUsingPOST(evaluation: EvaluationPanelDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EvaluationPanelDTO> {
            const localVarFetchArgs = EvaluationPanelControllerApiFetchParamCreator(configuration).addEvaluationPanelUsingPOST(evaluation, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a evaluation panel with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvaluationPanelUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EvaluationPanelControllerApiFetchParamCreator(configuration).deleteEvaluationPanelUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the list of all evaluation panels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET5(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<EvaluationPanelDTO>> {
            const localVarFetchArgs = EvaluationPanelControllerApiFetchParamCreator(configuration).getAllUsingGET5(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the panel chair of an evaluation panel with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChairUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReviewerDTO> {
            const localVarFetchArgs = EvaluationPanelControllerApiFetchParamCreator(configuration).getChairUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the evaluations of an evaluation panel with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvaluationsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<EvaluationDTO>> {
            const localVarFetchArgs = EvaluationPanelControllerApiFetchParamCreator(configuration).getEvaluationsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a evaluation panel with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET5(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EvaluationPanelDTO> {
            const localVarFetchArgs = EvaluationPanelControllerApiFetchParamCreator(configuration).getOneUsingGET5(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the reviewers of a evaluation panel with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewersUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ReviewerDTO>> {
            const localVarFetchArgs = EvaluationPanelControllerApiFetchParamCreator(configuration).getReviewersUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a evaluation panel with a given id
         * @param {EvaluationPanelDTO} evaluation evaluation
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvaluationPanelUsingPUT(evaluation: EvaluationPanelDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EvaluationPanelDTO> {
            const localVarFetchArgs = EvaluationPanelControllerApiFetchParamCreator(configuration).updateEvaluationPanelUsingPUT(evaluation, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EvaluationPanelControllerApi - factory interface
 * @export
 */
export const EvaluationPanelControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Creates a evaluation panel
         * @param {EvaluationPanelDTO} evaluation evaluation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvaluationPanelUsingPOST(evaluation: EvaluationPanelDTO, options?: any) {
            return EvaluationPanelControllerApiFp(configuration).addEvaluationPanelUsingPOST(evaluation, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a evaluation panel with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvaluationPanelUsingDELETE(id: number, options?: any) {
            return EvaluationPanelControllerApiFp(configuration).deleteEvaluationPanelUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the list of all evaluation panels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET5(options?: any) {
            return EvaluationPanelControllerApiFp(configuration).getAllUsingGET5(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the panel chair of an evaluation panel with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChairUsingGET(id: number, options?: any) {
            return EvaluationPanelControllerApiFp(configuration).getChairUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the evaluations of an evaluation panel with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvaluationsUsingGET(id: number, options?: any) {
            return EvaluationPanelControllerApiFp(configuration).getEvaluationsUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a evaluation panel with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET5(id: number, options?: any) {
            return EvaluationPanelControllerApiFp(configuration).getOneUsingGET5(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the reviewers of a evaluation panel with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewersUsingGET(id: number, options?: any) {
            return EvaluationPanelControllerApiFp(configuration).getReviewersUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a evaluation panel with a given id
         * @param {EvaluationPanelDTO} evaluation evaluation
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvaluationPanelUsingPUT(evaluation: EvaluationPanelDTO, id: number, options?: any) {
            return EvaluationPanelControllerApiFp(configuration).updateEvaluationPanelUsingPUT(evaluation, id, options)(fetch, basePath);
        },
    };
};

/**
 * EvaluationPanelControllerApi - object-oriented interface
 * @export
 * @class EvaluationPanelControllerApi
 * @extends {BaseAPI}
 */
export class EvaluationPanelControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a evaluation panel
     * @param {EvaluationPanelDTO} evaluation evaluation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationPanelControllerApi
     */
    public addEvaluationPanelUsingPOST(evaluation: EvaluationPanelDTO, options?: any) {
        return EvaluationPanelControllerApiFp(this.configuration).addEvaluationPanelUsingPOST(evaluation, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a evaluation panel with a given id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationPanelControllerApi
     */
    public deleteEvaluationPanelUsingDELETE(id: number, options?: any) {
        return EvaluationPanelControllerApiFp(this.configuration).deleteEvaluationPanelUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the list of all evaluation panels
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationPanelControllerApi
     */
    public getAllUsingGET5(options?: any) {
        return EvaluationPanelControllerApiFp(this.configuration).getAllUsingGET5(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the panel chair of an evaluation panel with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationPanelControllerApi
     */
    public getChairUsingGET(id: number, options?: any) {
        return EvaluationPanelControllerApiFp(this.configuration).getChairUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the evaluations of an evaluation panel with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationPanelControllerApi
     */
    public getEvaluationsUsingGET(id: number, options?: any) {
        return EvaluationPanelControllerApiFp(this.configuration).getEvaluationsUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a evaluation panel with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationPanelControllerApi
     */
    public getOneUsingGET5(id: number, options?: any) {
        return EvaluationPanelControllerApiFp(this.configuration).getOneUsingGET5(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the reviewers of a evaluation panel with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationPanelControllerApi
     */
    public getReviewersUsingGET(id: number, options?: any) {
        return EvaluationPanelControllerApiFp(this.configuration).getReviewersUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a evaluation panel with a given id
     * @param {EvaluationPanelDTO} evaluation evaluation
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationPanelControllerApi
     */
    public updateEvaluationPanelUsingPUT(evaluation: EvaluationPanelDTO, id: number, options?: any) {
        return EvaluationPanelControllerApiFp(this.configuration).updateEvaluationPanelUsingPUT(evaluation, id, options)(this.fetch, this.basePath);
    }

}

/**
 * GrantApplicationControllerApi - fetch parameter creator
 * @export
 */
export const GrantApplicationControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a grant application
         * @param {GrantApplicationDTO} grantApplication grantApplication
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGrantApplicationUsingPOST(grantApplication: GrantApplicationDTO, options: any = {}): FetchArgs {
            // verify required parameter 'grantApplication' is not null or undefined
            if (grantApplication === null || grantApplication === undefined) {
                throw new RequiredError('grantApplication','Required parameter grantApplication was null or undefined when calling addGrantApplicationUsingPOST.');
            }
            const localVarPath = `/applications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GrantApplicationDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(grantApplication || {}) : (grantApplication || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a grant application with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrantApplicationUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteGrantApplicationUsingDELETE.');
            }
            const localVarPath = `/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all grant applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET6(options: any = {}): FetchArgs {
            const localVarPath = `/applications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the answers to the data items of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnswersUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAnswersUsingGET.');
            }
            const localVarPath = `/applications/{id}/answers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the evaluation of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvaluationUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getEvaluationUsingGET.');
            }
            const localVarPath = `/applications/{id}/evaluation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the grant call of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantCallUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGrantCallUsingGET.');
            }
            const localVarPath = `/applications/{id}/call`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET6(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET6.');
            }
            const localVarPath = `/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the reviews of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getReviewsUsingGET.');
            }
            const localVarPath = `/applications/{id}/reviews`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the student of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getStudentUsingGET.');
            }
            const localVarPath = `/applications/{id}/student`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a grant application with a given id
         * @param {GrantApplicationDTO} grantApplication grantApplication
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGrantApplicationUsingPUT(grantApplication: GrantApplicationDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'grantApplication' is not null or undefined
            if (grantApplication === null || grantApplication === undefined) {
                throw new RequiredError('grantApplication','Required parameter grantApplication was null or undefined when calling updateGrantApplicationUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateGrantApplicationUsingPUT.');
            }
            const localVarPath = `/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GrantApplicationDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(grantApplication || {}) : (grantApplication || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GrantApplicationControllerApi - functional programming interface
 * @export
 */
export const GrantApplicationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a grant application
         * @param {GrantApplicationDTO} grantApplication grantApplication
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGrantApplicationUsingPOST(grantApplication: GrantApplicationDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GrantApplicationDTO> {
            const localVarFetchArgs = GrantApplicationControllerApiFetchParamCreator(configuration).addGrantApplicationUsingPOST(grantApplication, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a grant application with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrantApplicationUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GrantApplicationControllerApiFetchParamCreator(configuration).deleteGrantApplicationUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the list of all grant applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET6(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<GrantApplicationDTO>> {
            const localVarFetchArgs = GrantApplicationControllerApiFetchParamCreator(configuration).getAllUsingGET6(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the answers to the data items of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnswersUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DataItemAnswerDTO>> {
            const localVarFetchArgs = GrantApplicationControllerApiFetchParamCreator(configuration).getAnswersUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the evaluation of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvaluationUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EvaluationDTO> {
            const localVarFetchArgs = GrantApplicationControllerApiFetchParamCreator(configuration).getEvaluationUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the grant call of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantCallUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GrantCallDTO> {
            const localVarFetchArgs = GrantApplicationControllerApiFetchParamCreator(configuration).getGrantCallUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET6(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GrantApplicationDTO> {
            const localVarFetchArgs = GrantApplicationControllerApiFetchParamCreator(configuration).getOneUsingGET6(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the reviews of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ReviewDTO>> {
            const localVarFetchArgs = GrantApplicationControllerApiFetchParamCreator(configuration).getReviewsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the student of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StudentDTO> {
            const localVarFetchArgs = GrantApplicationControllerApiFetchParamCreator(configuration).getStudentUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a grant application with a given id
         * @param {GrantApplicationDTO} grantApplication grantApplication
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGrantApplicationUsingPUT(grantApplication: GrantApplicationDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GrantApplicationDTO> {
            const localVarFetchArgs = GrantApplicationControllerApiFetchParamCreator(configuration).updateGrantApplicationUsingPUT(grantApplication, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * GrantApplicationControllerApi - factory interface
 * @export
 */
export const GrantApplicationControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Creates a grant application
         * @param {GrantApplicationDTO} grantApplication grantApplication
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGrantApplicationUsingPOST(grantApplication: GrantApplicationDTO, options?: any) {
            return GrantApplicationControllerApiFp(configuration).addGrantApplicationUsingPOST(grantApplication, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a grant application with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrantApplicationUsingDELETE(id: number, options?: any) {
            return GrantApplicationControllerApiFp(configuration).deleteGrantApplicationUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the list of all grant applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET6(options?: any) {
            return GrantApplicationControllerApiFp(configuration).getAllUsingGET6(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the answers to the data items of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnswersUsingGET(id: number, options?: any) {
            return GrantApplicationControllerApiFp(configuration).getAnswersUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the evaluation of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvaluationUsingGET(id: number, options?: any) {
            return GrantApplicationControllerApiFp(configuration).getEvaluationUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the grant call of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantCallUsingGET(id: number, options?: any) {
            return GrantApplicationControllerApiFp(configuration).getGrantCallUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET6(id: number, options?: any) {
            return GrantApplicationControllerApiFp(configuration).getOneUsingGET6(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the reviews of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsUsingGET(id: number, options?: any) {
            return GrantApplicationControllerApiFp(configuration).getReviewsUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the student of a grant application with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentUsingGET(id: number, options?: any) {
            return GrantApplicationControllerApiFp(configuration).getStudentUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a grant application with a given id
         * @param {GrantApplicationDTO} grantApplication grantApplication
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGrantApplicationUsingPUT(grantApplication: GrantApplicationDTO, id: number, options?: any) {
            return GrantApplicationControllerApiFp(configuration).updateGrantApplicationUsingPUT(grantApplication, id, options)(fetch, basePath);
        },
    };
};

/**
 * GrantApplicationControllerApi - object-oriented interface
 * @export
 * @class GrantApplicationControllerApi
 * @extends {BaseAPI}
 */
export class GrantApplicationControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a grant application
     * @param {GrantApplicationDTO} grantApplication grantApplication
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantApplicationControllerApi
     */
    public addGrantApplicationUsingPOST(grantApplication: GrantApplicationDTO, options?: any) {
        return GrantApplicationControllerApiFp(this.configuration).addGrantApplicationUsingPOST(grantApplication, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a grant application with a given id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantApplicationControllerApi
     */
    public deleteGrantApplicationUsingDELETE(id: number, options?: any) {
        return GrantApplicationControllerApiFp(this.configuration).deleteGrantApplicationUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the list of all grant applications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantApplicationControllerApi
     */
    public getAllUsingGET6(options?: any) {
        return GrantApplicationControllerApiFp(this.configuration).getAllUsingGET6(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the answers to the data items of a grant application with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantApplicationControllerApi
     */
    public getAnswersUsingGET(id: number, options?: any) {
        return GrantApplicationControllerApiFp(this.configuration).getAnswersUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the evaluation of a grant application with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantApplicationControllerApi
     */
    public getEvaluationUsingGET(id: number, options?: any) {
        return GrantApplicationControllerApiFp(this.configuration).getEvaluationUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the grant call of a grant application with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantApplicationControllerApi
     */
    public getGrantCallUsingGET(id: number, options?: any) {
        return GrantApplicationControllerApiFp(this.configuration).getGrantCallUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a grant application with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantApplicationControllerApi
     */
    public getOneUsingGET6(id: number, options?: any) {
        return GrantApplicationControllerApiFp(this.configuration).getOneUsingGET6(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the reviews of a grant application with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantApplicationControllerApi
     */
    public getReviewsUsingGET(id: number, options?: any) {
        return GrantApplicationControllerApiFp(this.configuration).getReviewsUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the student of a grant application with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantApplicationControllerApi
     */
    public getStudentUsingGET(id: number, options?: any) {
        return GrantApplicationControllerApiFp(this.configuration).getStudentUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a grant application with a given id
     * @param {GrantApplicationDTO} grantApplication grantApplication
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantApplicationControllerApi
     */
    public updateGrantApplicationUsingPUT(grantApplication: GrantApplicationDTO, id: number, options?: any) {
        return GrantApplicationControllerApiFp(this.configuration).updateGrantApplicationUsingPUT(grantApplication, id, options)(this.fetch, this.basePath);
    }

}

/**
 * GrantCallControllerApi - fetch parameter creator
 * @export
 */
export const GrantCallControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a grant call
         * @param {GrantCallDTO} grantCall grantCall
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGrantCallUsingPOST(grantCall: GrantCallDTO, options: any = {}): FetchArgs {
            // verify required parameter 'grantCall' is not null or undefined
            if (grantCall === null || grantCall === undefined) {
                throw new RequiredError('grantCall','Required parameter grantCall was null or undefined when calling addGrantCallUsingPOST.');
            }
            const localVarPath = `/calls`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GrantCallDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(grantCall || {}) : (grantCall || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a grant call with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrantCallUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteGrantCallUsingDELETE.');
            }
            const localVarPath = `/calls/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all grant calls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET7(options: any = {}): FetchArgs {
            const localVarPath = `/calls`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the applications of a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsForGrantUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getApplicationsForGrantUsingGET.');
            }
            const localVarPath = `/calls/{id}/applications`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the DataItems for a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataItemsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDataItemsUsingGET.');
            }
            const localVarPath = `/calls/{id}/dataItems`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the panel for a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantPanelUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGrantPanelUsingGET.');
            }
            const localVarPath = `/calls/{id}/panel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET7(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET7.');
            }
            const localVarPath = `/calls/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the sponsor for a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSponsorUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSponsorUsingGET.');
            }
            const localVarPath = `/calls/{id}/sponsor`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a grant call with a given id
         * @param {GrantCallDTO} grantCall grantCall
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGrantCallUsingPUT(grantCall: GrantCallDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'grantCall' is not null or undefined
            if (grantCall === null || grantCall === undefined) {
                throw new RequiredError('grantCall','Required parameter grantCall was null or undefined when calling updateGrantCallUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateGrantCallUsingPUT.');
            }
            const localVarPath = `/calls/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GrantCallDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(grantCall || {}) : (grantCall || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GrantCallControllerApi - functional programming interface
 * @export
 */
export const GrantCallControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a grant call
         * @param {GrantCallDTO} grantCall grantCall
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGrantCallUsingPOST(grantCall: GrantCallDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GrantCallDTO> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).addGrantCallUsingPOST(grantCall, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a grant call with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrantCallUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).deleteGrantCallUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the list of all grant calls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET7(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<GrantCallDTO>> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).getAllUsingGET7(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the applications of a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsForGrantUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<GrantApplicationDTO>> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).getApplicationsForGrantUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the DataItems for a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataItemsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DataItemDTO>> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).getDataItemsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the panel for a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantPanelUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EvaluationPanelDTO> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).getGrantPanelUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET7(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GrantCallDTO> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).getOneUsingGET7(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the sponsor for a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSponsorUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SponsorDTO> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).getSponsorUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a grant call with a given id
         * @param {GrantCallDTO} grantCall grantCall
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGrantCallUsingPUT(grantCall: GrantCallDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GrantCallDTO> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).updateGrantCallUsingPUT(grantCall, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * GrantCallControllerApi - factory interface
 * @export
 */
export const GrantCallControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Creates a grant call
         * @param {GrantCallDTO} grantCall grantCall
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGrantCallUsingPOST(grantCall: GrantCallDTO, options?: any) {
            return GrantCallControllerApiFp(configuration).addGrantCallUsingPOST(grantCall, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a grant call with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrantCallUsingDELETE(id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).deleteGrantCallUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the list of all grant calls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET7(options?: any) {
            return GrantCallControllerApiFp(configuration).getAllUsingGET7(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the applications of a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsForGrantUsingGET(id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).getApplicationsForGrantUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the DataItems for a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataItemsUsingGET(id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).getDataItemsUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the panel for a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantPanelUsingGET(id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).getGrantPanelUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET7(id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).getOneUsingGET7(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the sponsor for a grant call with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSponsorUsingGET(id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).getSponsorUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a grant call with a given id
         * @param {GrantCallDTO} grantCall grantCall
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGrantCallUsingPUT(grantCall: GrantCallDTO, id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).updateGrantCallUsingPUT(grantCall, id, options)(fetch, basePath);
        },
    };
};

/**
 * GrantCallControllerApi - object-oriented interface
 * @export
 * @class GrantCallControllerApi
 * @extends {BaseAPI}
 */
export class GrantCallControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a grant call
     * @param {GrantCallDTO} grantCall grantCall
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public addGrantCallUsingPOST(grantCall: GrantCallDTO, options?: any) {
        return GrantCallControllerApiFp(this.configuration).addGrantCallUsingPOST(grantCall, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a grant call with a given id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public deleteGrantCallUsingDELETE(id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).deleteGrantCallUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the list of all grant calls
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public getAllUsingGET7(options?: any) {
        return GrantCallControllerApiFp(this.configuration).getAllUsingGET7(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the applications of a grant call with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public getApplicationsForGrantUsingGET(id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).getApplicationsForGrantUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the DataItems for a grant call with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public getDataItemsUsingGET(id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).getDataItemsUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the panel for a grant call with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public getGrantPanelUsingGET(id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).getGrantPanelUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a grant call with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public getOneUsingGET7(id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).getOneUsingGET7(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the sponsor for a grant call with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public getSponsorUsingGET(id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).getSponsorUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a grant call with a given id
     * @param {GrantCallDTO} grantCall grantCall
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public updateGrantCallUsingPUT(grantCall: GrantCallDTO, id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).updateGrantCallUsingPUT(grantCall, id, options)(this.fetch, this.basePath);
    }

}

/**
 * InstitutionControllerApi - fetch parameter creator
 * @export
 */
export const InstitutionControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates an institution
         * @param {InstitutionDTO} institution institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstitutionUsingPOST(institution: InstitutionDTO, options: any = {}): FetchArgs {
            // verify required parameter 'institution' is not null or undefined
            if (institution === null || institution === undefined) {
                throw new RequiredError('institution','Required parameter institution was null or undefined when calling addInstitutionUsingPOST.');
            }
            const localVarPath = `/institution`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InstitutionDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(institution || {}) : (institution || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a institution with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstitutionUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteInstitutionUsingDELETE.');
            }
            const localVarPath = `/institution/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all institutions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET8(options: any = {}): FetchArgs {
            const localVarPath = `/institution`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a institution with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET8(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET8.');
            }
            const localVarPath = `/institution/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the people of the institution with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeopleUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPeopleUsingGET.');
            }
            const localVarPath = `/institution/{id}/people`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the reviewers of the institution with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewersUsingGET1(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getReviewersUsingGET1.');
            }
            const localVarPath = `/institution/{id}/reviewers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the students of the institution with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getStudentsUsingGET.');
            }
            const localVarPath = `/institution/{id}/students`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a institution with a given id
         * @param {number} id id
         * @param {InstitutionDTO} institution institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstitutionUsingPUT(id: number, institution: InstitutionDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateInstitutionUsingPUT.');
            }
            // verify required parameter 'institution' is not null or undefined
            if (institution === null || institution === undefined) {
                throw new RequiredError('institution','Required parameter institution was null or undefined when calling updateInstitutionUsingPUT.');
            }
            const localVarPath = `/institution/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InstitutionDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(institution || {}) : (institution || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstitutionControllerApi - functional programming interface
 * @export
 */
export const InstitutionControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates an institution
         * @param {InstitutionDTO} institution institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstitutionUsingPOST(institution: InstitutionDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InstitutionDTO> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).addInstitutionUsingPOST(institution, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a institution with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstitutionUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).deleteInstitutionUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the list of all institutions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET8(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<InstitutionDTO>> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).getAllUsingGET8(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a institution with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET8(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InstitutionDTO> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).getOneUsingGET8(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the people of the institution with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeopleUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PersonDTO>> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).getPeopleUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the reviewers of the institution with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewersUsingGET1(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ReviewerDTO>> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).getReviewersUsingGET1(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the students of the institution with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<StudentDTO>> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).getStudentsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a institution with a given id
         * @param {number} id id
         * @param {InstitutionDTO} institution institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstitutionUsingPUT(id: number, institution: InstitutionDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InstitutionDTO> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).updateInstitutionUsingPUT(id, institution, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * InstitutionControllerApi - factory interface
 * @export
 */
export const InstitutionControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Creates an institution
         * @param {InstitutionDTO} institution institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstitutionUsingPOST(institution: InstitutionDTO, options?: any) {
            return InstitutionControllerApiFp(configuration).addInstitutionUsingPOST(institution, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a institution with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstitutionUsingDELETE(id: number, options?: any) {
            return InstitutionControllerApiFp(configuration).deleteInstitutionUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the list of all institutions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET8(options?: any) {
            return InstitutionControllerApiFp(configuration).getAllUsingGET8(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a institution with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET8(id: number, options?: any) {
            return InstitutionControllerApiFp(configuration).getOneUsingGET8(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the people of the institution with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeopleUsingGET(id: number, options?: any) {
            return InstitutionControllerApiFp(configuration).getPeopleUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the reviewers of the institution with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewersUsingGET1(id: number, options?: any) {
            return InstitutionControllerApiFp(configuration).getReviewersUsingGET1(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the students of the institution with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentsUsingGET(id: number, options?: any) {
            return InstitutionControllerApiFp(configuration).getStudentsUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a institution with a given id
         * @param {number} id id
         * @param {InstitutionDTO} institution institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstitutionUsingPUT(id: number, institution: InstitutionDTO, options?: any) {
            return InstitutionControllerApiFp(configuration).updateInstitutionUsingPUT(id, institution, options)(fetch, basePath);
        },
    };
};

/**
 * InstitutionControllerApi - object-oriented interface
 * @export
 * @class InstitutionControllerApi
 * @extends {BaseAPI}
 */
export class InstitutionControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates an institution
     * @param {InstitutionDTO} institution institution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public addInstitutionUsingPOST(institution: InstitutionDTO, options?: any) {
        return InstitutionControllerApiFp(this.configuration).addInstitutionUsingPOST(institution, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a institution with a given id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public deleteInstitutionUsingDELETE(id: number, options?: any) {
        return InstitutionControllerApiFp(this.configuration).deleteInstitutionUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the list of all institutions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public getAllUsingGET8(options?: any) {
        return InstitutionControllerApiFp(this.configuration).getAllUsingGET8(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a institution with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public getOneUsingGET8(id: number, options?: any) {
        return InstitutionControllerApiFp(this.configuration).getOneUsingGET8(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the people of the institution with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public getPeopleUsingGET(id: number, options?: any) {
        return InstitutionControllerApiFp(this.configuration).getPeopleUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the reviewers of the institution with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public getReviewersUsingGET1(id: number, options?: any) {
        return InstitutionControllerApiFp(this.configuration).getReviewersUsingGET1(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the students of the institution with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public getStudentsUsingGET(id: number, options?: any) {
        return InstitutionControllerApiFp(this.configuration).getStudentsUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a institution with a given id
     * @param {number} id id
     * @param {InstitutionDTO} institution institution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public updateInstitutionUsingPUT(id: number, institution: InstitutionDTO, options?: any) {
        return InstitutionControllerApiFp(this.configuration).updateInstitutionUsingPUT(id, institution, options)(this.fetch, this.basePath);
    }

}

/**
 * PersonControllerApi - fetch parameter creator
 * @export
 */
export const PersonControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a person
         * @param {PersonDTO} person person
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPersonUsingPOST(person: PersonDTO, options: any = {}): FetchArgs {
            // verify required parameter 'person' is not null or undefined
            if (person === null || person === undefined) {
                throw new RequiredError('person','Required parameter person was null or undefined when calling addPersonUsingPOST.');
            }
            const localVarPath = `/person`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PersonDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(person || {}) : (person || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a person with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePersonUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePersonUsingDELETE.');
            }
            const localVarPath = `/person/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all people
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET9(options: any = {}): FetchArgs {
            const localVarPath = `/person`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a person with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET9(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET9.');
            }
            const localVarPath = `/person/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a person with a given id
         * @param {number} id id
         * @param {PersonDTO} person person
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonUsingPUT(id: number, person: PersonDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updatePersonUsingPUT.');
            }
            // verify required parameter 'person' is not null or undefined
            if (person === null || person === undefined) {
                throw new RequiredError('person','Required parameter person was null or undefined when calling updatePersonUsingPUT.');
            }
            const localVarPath = `/person/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PersonDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(person || {}) : (person || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonControllerApi - functional programming interface
 * @export
 */
export const PersonControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a person
         * @param {PersonDTO} person person
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPersonUsingPOST(person: PersonDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PersonDTO> {
            const localVarFetchArgs = PersonControllerApiFetchParamCreator(configuration).addPersonUsingPOST(person, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a person with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePersonUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PersonControllerApiFetchParamCreator(configuration).deletePersonUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the list of all people
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET9(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PersonDTO>> {
            const localVarFetchArgs = PersonControllerApiFetchParamCreator(configuration).getAllUsingGET9(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a person with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET9(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PersonDTO> {
            const localVarFetchArgs = PersonControllerApiFetchParamCreator(configuration).getOneUsingGET9(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a person with a given id
         * @param {number} id id
         * @param {PersonDTO} person person
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonUsingPUT(id: number, person: PersonDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PersonDTO> {
            const localVarFetchArgs = PersonControllerApiFetchParamCreator(configuration).updatePersonUsingPUT(id, person, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PersonControllerApi - factory interface
 * @export
 */
export const PersonControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Creates a person
         * @param {PersonDTO} person person
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPersonUsingPOST(person: PersonDTO, options?: any) {
            return PersonControllerApiFp(configuration).addPersonUsingPOST(person, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a person with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePersonUsingDELETE(id: number, options?: any) {
            return PersonControllerApiFp(configuration).deletePersonUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the list of all people
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET9(options?: any) {
            return PersonControllerApiFp(configuration).getAllUsingGET9(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a person with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET9(id: number, options?: any) {
            return PersonControllerApiFp(configuration).getOneUsingGET9(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a person with a given id
         * @param {number} id id
         * @param {PersonDTO} person person
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonUsingPUT(id: number, person: PersonDTO, options?: any) {
            return PersonControllerApiFp(configuration).updatePersonUsingPUT(id, person, options)(fetch, basePath);
        },
    };
};

/**
 * PersonControllerApi - object-oriented interface
 * @export
 * @class PersonControllerApi
 * @extends {BaseAPI}
 */
export class PersonControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a person
     * @param {PersonDTO} person person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonControllerApi
     */
    public addPersonUsingPOST(person: PersonDTO, options?: any) {
        return PersonControllerApiFp(this.configuration).addPersonUsingPOST(person, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a person with a given id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonControllerApi
     */
    public deletePersonUsingDELETE(id: number, options?: any) {
        return PersonControllerApiFp(this.configuration).deletePersonUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the list of all people
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonControllerApi
     */
    public getAllUsingGET9(options?: any) {
        return PersonControllerApiFp(this.configuration).getAllUsingGET9(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a person with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonControllerApi
     */
    public getOneUsingGET9(id: number, options?: any) {
        return PersonControllerApiFp(this.configuration).getOneUsingGET9(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a person with a given id
     * @param {number} id id
     * @param {PersonDTO} person person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonControllerApi
     */
    public updatePersonUsingPUT(id: number, person: PersonDTO, options?: any) {
        return PersonControllerApiFp(this.configuration).updatePersonUsingPUT(id, person, options)(this.fetch, this.basePath);
    }

}

/**
 * ReviewControllerApi - fetch parameter creator
 * @export
 */
export const ReviewControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a review
         * @param {ReviewDTO} review review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewUsingPOST(review: ReviewDTO, options: any = {}): FetchArgs {
            // verify required parameter 'review' is not null or undefined
            if (review === null || review === undefined) {
                throw new RequiredError('review','Required parameter review was null or undefined when calling addReviewUsingPOST.');
            }
            const localVarPath = `/review`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReviewDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(review || {}) : (review || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a review with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteReviewUsingDELETE.');
            }
            const localVarPath = `/review/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all reviews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET10(options: any = {}): FetchArgs {
            const localVarPath = `/review`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a review with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET10(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET10.');
            }
            const localVarPath = `/review/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a review with a given id
         * @param {number} id id
         * @param {ReviewDTO} review review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReviewUsingPUT(id: number, review: ReviewDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateReviewUsingPUT.');
            }
            // verify required parameter 'review' is not null or undefined
            if (review === null || review === undefined) {
                throw new RequiredError('review','Required parameter review was null or undefined when calling updateReviewUsingPUT.');
            }
            const localVarPath = `/review/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReviewDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(review || {}) : (review || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewControllerApi - functional programming interface
 * @export
 */
export const ReviewControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a review
         * @param {ReviewDTO} review review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewUsingPOST(review: ReviewDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReviewDTO> {
            const localVarFetchArgs = ReviewControllerApiFetchParamCreator(configuration).addReviewUsingPOST(review, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a review with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ReviewControllerApiFetchParamCreator(configuration).deleteReviewUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the list of all reviews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET10(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ReviewDTO>> {
            const localVarFetchArgs = ReviewControllerApiFetchParamCreator(configuration).getAllUsingGET10(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a review with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET10(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReviewDTO> {
            const localVarFetchArgs = ReviewControllerApiFetchParamCreator(configuration).getOneUsingGET10(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a review with a given id
         * @param {number} id id
         * @param {ReviewDTO} review review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReviewUsingPUT(id: number, review: ReviewDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReviewDTO> {
            const localVarFetchArgs = ReviewControllerApiFetchParamCreator(configuration).updateReviewUsingPUT(id, review, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ReviewControllerApi - factory interface
 * @export
 */
export const ReviewControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Creates a review
         * @param {ReviewDTO} review review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewUsingPOST(review: ReviewDTO, options?: any) {
            return ReviewControllerApiFp(configuration).addReviewUsingPOST(review, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a review with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewUsingDELETE(id: number, options?: any) {
            return ReviewControllerApiFp(configuration).deleteReviewUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the list of all reviews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET10(options?: any) {
            return ReviewControllerApiFp(configuration).getAllUsingGET10(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a review with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET10(id: number, options?: any) {
            return ReviewControllerApiFp(configuration).getOneUsingGET10(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a review with a given id
         * @param {number} id id
         * @param {ReviewDTO} review review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReviewUsingPUT(id: number, review: ReviewDTO, options?: any) {
            return ReviewControllerApiFp(configuration).updateReviewUsingPUT(id, review, options)(fetch, basePath);
        },
    };
};

/**
 * ReviewControllerApi - object-oriented interface
 * @export
 * @class ReviewControllerApi
 * @extends {BaseAPI}
 */
export class ReviewControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a review
     * @param {ReviewDTO} review review
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public addReviewUsingPOST(review: ReviewDTO, options?: any) {
        return ReviewControllerApiFp(this.configuration).addReviewUsingPOST(review, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a review with a given id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public deleteReviewUsingDELETE(id: number, options?: any) {
        return ReviewControllerApiFp(this.configuration).deleteReviewUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the list of all reviews
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public getAllUsingGET10(options?: any) {
        return ReviewControllerApiFp(this.configuration).getAllUsingGET10(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a review with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public getOneUsingGET10(id: number, options?: any) {
        return ReviewControllerApiFp(this.configuration).getOneUsingGET10(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a review with a given id
     * @param {number} id id
     * @param {ReviewDTO} review review
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public updateReviewUsingPUT(id: number, review: ReviewDTO, options?: any) {
        return ReviewControllerApiFp(this.configuration).updateReviewUsingPUT(id, review, options)(this.fetch, this.basePath);
    }

}

/**
 * ReviewerControllerApi - fetch parameter creator
 * @export
 */
export const ReviewerControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a reviewer
         * @param {ReviewerDTO} reviewer reviewer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewerUsingPOST(reviewer: ReviewerDTO, options: any = {}): FetchArgs {
            // verify required parameter 'reviewer' is not null or undefined
            if (reviewer === null || reviewer === undefined) {
                throw new RequiredError('reviewer','Required parameter reviewer was null or undefined when calling addReviewerUsingPOST.');
            }
            const localVarPath = `/reviewer`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReviewerDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(reviewer || {}) : (reviewer || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a Reviewer with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewerUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteReviewerUsingDELETE.');
            }
            const localVarPath = `/reviewer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all reviewers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET11(options: any = {}): FetchArgs {
            const localVarPath = `/reviewer`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a Reviewer with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET11(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET11.');
            }
            const localVarPath = `/reviewer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the panels where a Reviewer with a specific id is chair
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewerPanelsChairUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getReviewerPanelsChairUsingGET.');
            }
            const localVarPath = `/reviewer/{id}/chair`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the panels of a Reviewer with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewerPanelsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getReviewerPanelsUsingGET.');
            }
            const localVarPath = `/reviewer/{id}/panels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the reviews of a Reviewer with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewerReviewsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getReviewerReviewsUsingGET.');
            }
            const localVarPath = `/reviewer/{id}/reviews`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a Reviewer with a specific id
         * @param {number} id id
         * @param {ReviewerDTO} reviewer reviewer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReviewerUsingPUT(id: number, reviewer: ReviewerDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateReviewerUsingPUT.');
            }
            // verify required parameter 'reviewer' is not null or undefined
            if (reviewer === null || reviewer === undefined) {
                throw new RequiredError('reviewer','Required parameter reviewer was null or undefined when calling updateReviewerUsingPUT.');
            }
            const localVarPath = `/reviewer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReviewerDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(reviewer || {}) : (reviewer || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewerControllerApi - functional programming interface
 * @export
 */
export const ReviewerControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a reviewer
         * @param {ReviewerDTO} reviewer reviewer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewerUsingPOST(reviewer: ReviewerDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReviewerDTO> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).addReviewerUsingPOST(reviewer, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a Reviewer with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewerUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).deleteReviewerUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the list of all reviewers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET11(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ReviewerDTO>> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).getAllUsingGET11(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a Reviewer with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET11(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReviewerDTO> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).getOneUsingGET11(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the panels where a Reviewer with a specific id is chair
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewerPanelsChairUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<EvaluationPanelDTO>> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).getReviewerPanelsChairUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the panels of a Reviewer with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewerPanelsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<EvaluationPanelDTO>> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).getReviewerPanelsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the reviews of a Reviewer with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewerReviewsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ReviewDTO>> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).getReviewerReviewsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a Reviewer with a specific id
         * @param {number} id id
         * @param {ReviewerDTO} reviewer reviewer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReviewerUsingPUT(id: number, reviewer: ReviewerDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReviewerDTO> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).updateReviewerUsingPUT(id, reviewer, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ReviewerControllerApi - factory interface
 * @export
 */
export const ReviewerControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Creates a reviewer
         * @param {ReviewerDTO} reviewer reviewer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewerUsingPOST(reviewer: ReviewerDTO, options?: any) {
            return ReviewerControllerApiFp(configuration).addReviewerUsingPOST(reviewer, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a Reviewer with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewerUsingDELETE(id: number, options?: any) {
            return ReviewerControllerApiFp(configuration).deleteReviewerUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the list of all reviewers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET11(options?: any) {
            return ReviewerControllerApiFp(configuration).getAllUsingGET11(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a Reviewer with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET11(id: number, options?: any) {
            return ReviewerControllerApiFp(configuration).getOneUsingGET11(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the panels where a Reviewer with a specific id is chair
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewerPanelsChairUsingGET(id: number, options?: any) {
            return ReviewerControllerApiFp(configuration).getReviewerPanelsChairUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the panels of a Reviewer with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewerPanelsUsingGET(id: number, options?: any) {
            return ReviewerControllerApiFp(configuration).getReviewerPanelsUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the reviews of a Reviewer with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewerReviewsUsingGET(id: number, options?: any) {
            return ReviewerControllerApiFp(configuration).getReviewerReviewsUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a Reviewer with a specific id
         * @param {number} id id
         * @param {ReviewerDTO} reviewer reviewer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReviewerUsingPUT(id: number, reviewer: ReviewerDTO, options?: any) {
            return ReviewerControllerApiFp(configuration).updateReviewerUsingPUT(id, reviewer, options)(fetch, basePath);
        },
    };
};

/**
 * ReviewerControllerApi - object-oriented interface
 * @export
 * @class ReviewerControllerApi
 * @extends {BaseAPI}
 */
export class ReviewerControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a reviewer
     * @param {ReviewerDTO} reviewer reviewer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public addReviewerUsingPOST(reviewer: ReviewerDTO, options?: any) {
        return ReviewerControllerApiFp(this.configuration).addReviewerUsingPOST(reviewer, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a Reviewer with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public deleteReviewerUsingDELETE(id: number, options?: any) {
        return ReviewerControllerApiFp(this.configuration).deleteReviewerUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the list of all reviewers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public getAllUsingGET11(options?: any) {
        return ReviewerControllerApiFp(this.configuration).getAllUsingGET11(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a Reviewer with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public getOneUsingGET11(id: number, options?: any) {
        return ReviewerControllerApiFp(this.configuration).getOneUsingGET11(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the panels where a Reviewer with a specific id is chair
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public getReviewerPanelsChairUsingGET(id: number, options?: any) {
        return ReviewerControllerApiFp(this.configuration).getReviewerPanelsChairUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the panels of a Reviewer with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public getReviewerPanelsUsingGET(id: number, options?: any) {
        return ReviewerControllerApiFp(this.configuration).getReviewerPanelsUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the reviews of a Reviewer with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public getReviewerReviewsUsingGET(id: number, options?: any) {
        return ReviewerControllerApiFp(this.configuration).getReviewerReviewsUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a Reviewer with a specific id
     * @param {number} id id
     * @param {ReviewerDTO} reviewer reviewer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public updateReviewerUsingPUT(id: number, reviewer: ReviewerDTO, options?: any) {
        return ReviewerControllerApiFp(this.configuration).updateReviewerUsingPUT(id, reviewer, options)(this.fetch, this.basePath);
    }

}

/**
 * SponsorControllerApi - fetch parameter creator
 * @export
 */
export const SponsorControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a sponsor
         * @param {SponsorDTO} sponsor sponsor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSponsorUsingPOST(sponsor: SponsorDTO, options: any = {}): FetchArgs {
            // verify required parameter 'sponsor' is not null or undefined
            if (sponsor === null || sponsor === undefined) {
                throw new RequiredError('sponsor','Required parameter sponsor was null or undefined when calling addSponsorUsingPOST.');
            }
            const localVarPath = `/sponsor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SponsorDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(sponsor || {}) : (sponsor || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a sponsor with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSponsorUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteSponsorUsingDELETE.');
            }
            const localVarPath = `/sponsor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all sponsors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET12(options: any = {}): FetchArgs {
            const localVarPath = `/sponsor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the grants of a sponsor with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGrantsUsingGET.');
            }
            const localVarPath = `/sponsor/{id}/calls`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a sponsor with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET12(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET12.');
            }
            const localVarPath = `/sponsor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a sponsor with a given id
         * @param {number} id id
         * @param {SponsorDTO} sponsor sponsor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSponsorUsingPUT(id: number, sponsor: SponsorDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateSponsorUsingPUT.');
            }
            // verify required parameter 'sponsor' is not null or undefined
            if (sponsor === null || sponsor === undefined) {
                throw new RequiredError('sponsor','Required parameter sponsor was null or undefined when calling updateSponsorUsingPUT.');
            }
            const localVarPath = `/sponsor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SponsorDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(sponsor || {}) : (sponsor || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SponsorControllerApi - functional programming interface
 * @export
 */
export const SponsorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a sponsor
         * @param {SponsorDTO} sponsor sponsor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSponsorUsingPOST(sponsor: SponsorDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SponsorDTO> {
            const localVarFetchArgs = SponsorControllerApiFetchParamCreator(configuration).addSponsorUsingPOST(sponsor, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a sponsor with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSponsorUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SponsorControllerApiFetchParamCreator(configuration).deleteSponsorUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the list of all sponsors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET12(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SponsorDTO>> {
            const localVarFetchArgs = SponsorControllerApiFetchParamCreator(configuration).getAllUsingGET12(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the grants of a sponsor with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<GrantCallDTO>> {
            const localVarFetchArgs = SponsorControllerApiFetchParamCreator(configuration).getGrantsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a sponsor with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET12(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SponsorDTO> {
            const localVarFetchArgs = SponsorControllerApiFetchParamCreator(configuration).getOneUsingGET12(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a sponsor with a given id
         * @param {number} id id
         * @param {SponsorDTO} sponsor sponsor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSponsorUsingPUT(id: number, sponsor: SponsorDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SponsorDTO> {
            const localVarFetchArgs = SponsorControllerApiFetchParamCreator(configuration).updateSponsorUsingPUT(id, sponsor, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SponsorControllerApi - factory interface
 * @export
 */
export const SponsorControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Creates a sponsor
         * @param {SponsorDTO} sponsor sponsor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSponsorUsingPOST(sponsor: SponsorDTO, options?: any) {
            return SponsorControllerApiFp(configuration).addSponsorUsingPOST(sponsor, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a sponsor with a given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSponsorUsingDELETE(id: number, options?: any) {
            return SponsorControllerApiFp(configuration).deleteSponsorUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the list of all sponsors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET12(options?: any) {
            return SponsorControllerApiFp(configuration).getAllUsingGET12(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the grants of a sponsor with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantsUsingGET(id: number, options?: any) {
            return SponsorControllerApiFp(configuration).getGrantsUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a sponsor with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET12(id: number, options?: any) {
            return SponsorControllerApiFp(configuration).getOneUsingGET12(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a sponsor with a given id
         * @param {number} id id
         * @param {SponsorDTO} sponsor sponsor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSponsorUsingPUT(id: number, sponsor: SponsorDTO, options?: any) {
            return SponsorControllerApiFp(configuration).updateSponsorUsingPUT(id, sponsor, options)(fetch, basePath);
        },
    };
};

/**
 * SponsorControllerApi - object-oriented interface
 * @export
 * @class SponsorControllerApi
 * @extends {BaseAPI}
 */
export class SponsorControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a sponsor
     * @param {SponsorDTO} sponsor sponsor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorControllerApi
     */
    public addSponsorUsingPOST(sponsor: SponsorDTO, options?: any) {
        return SponsorControllerApiFp(this.configuration).addSponsorUsingPOST(sponsor, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a sponsor with a given id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorControllerApi
     */
    public deleteSponsorUsingDELETE(id: number, options?: any) {
        return SponsorControllerApiFp(this.configuration).deleteSponsorUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the list of all sponsors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorControllerApi
     */
    public getAllUsingGET12(options?: any) {
        return SponsorControllerApiFp(this.configuration).getAllUsingGET12(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the grants of a sponsor with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorControllerApi
     */
    public getGrantsUsingGET(id: number, options?: any) {
        return SponsorControllerApiFp(this.configuration).getGrantsUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a sponsor with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorControllerApi
     */
    public getOneUsingGET12(id: number, options?: any) {
        return SponsorControllerApiFp(this.configuration).getOneUsingGET12(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a sponsor with a given id
     * @param {number} id id
     * @param {SponsorDTO} sponsor sponsor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorControllerApi
     */
    public updateSponsorUsingPUT(id: number, sponsor: SponsorDTO, options?: any) {
        return SponsorControllerApiFp(this.configuration).updateSponsorUsingPUT(id, sponsor, options)(this.fetch, this.basePath);
    }

}

/**
 * StudentControllerApi - fetch parameter creator
 * @export
 */
export const StudentControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a student
         * @param {StudentDTO} student student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudentUsingPOST(student: StudentDTO, options: any = {}): FetchArgs {
            // verify required parameter 'student' is not null or undefined
            if (student === null || student === undefined) {
                throw new RequiredError('student','Required parameter student was null or undefined when calling addStudentUsingPOST.');
            }
            const localVarPath = `/student`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"StudentDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(student || {}) : (student || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a student with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteStudentUsingDELETE.');
            }
            const localVarPath = `/student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET13(options: any = {}): FetchArgs {
            const localVarPath = `/student`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of application of student with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getApplicationsUsingGET.');
            }
            const localVarPath = `/student/{id}/applications`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a student with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET13(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET13.');
            }
            const localVarPath = `/student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the cv of a student
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentCvUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getStudentCvUsingGET.');
            }
            const localVarPath = `/student/{id}/cv`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a student with a specific id
         * @param {number} id id
         * @param {StudentDTO} student student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentUsingPUT(id: number, student: StudentDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateStudentUsingPUT.');
            }
            // verify required parameter 'student' is not null or undefined
            if (student === null || student === undefined) {
                throw new RequiredError('student','Required parameter student was null or undefined when calling updateStudentUsingPUT.');
            }
            const localVarPath = `/student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"StudentDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(student || {}) : (student || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentControllerApi - functional programming interface
 * @export
 */
export const StudentControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a student
         * @param {StudentDTO} student student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudentUsingPOST(student: StudentDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StudentDTO> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).addStudentUsingPOST(student, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a student with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).deleteStudentUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the list of all students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET13(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<StudentDTO>> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).getAllUsingGET13(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns a list of application of student with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<GrantApplicationDTO>> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).getApplicationsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a student with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET13(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StudentDTO> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).getOneUsingGET13(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns the cv of a student
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentCvUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CurriculumVitaeDTO> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).getStudentCvUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a student with a specific id
         * @param {number} id id
         * @param {StudentDTO} student student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentUsingPUT(id: number, student: StudentDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StudentDTO> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).updateStudentUsingPUT(id, student, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StudentControllerApi - factory interface
 * @export
 */
export const StudentControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Creates a student
         * @param {StudentDTO} student student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudentUsingPOST(student: StudentDTO, options?: any) {
            return StudentControllerApiFp(configuration).addStudentUsingPOST(student, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a student with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentUsingDELETE(id: number, options?: any) {
            return StudentControllerApiFp(configuration).deleteStudentUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the list of all students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET13(options?: any) {
            return StudentControllerApiFp(configuration).getAllUsingGET13(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns a list of application of student with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsUsingGET(id: number, options?: any) {
            return StudentControllerApiFp(configuration).getApplicationsUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a student with a specific id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET13(id: number, options?: any) {
            return StudentControllerApiFp(configuration).getOneUsingGET13(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns the cv of a student
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentCvUsingGET(id: number, options?: any) {
            return StudentControllerApiFp(configuration).getStudentCvUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a student with a specific id
         * @param {number} id id
         * @param {StudentDTO} student student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentUsingPUT(id: number, student: StudentDTO, options?: any) {
            return StudentControllerApiFp(configuration).updateStudentUsingPUT(id, student, options)(fetch, basePath);
        },
    };
};

/**
 * StudentControllerApi - object-oriented interface
 * @export
 * @class StudentControllerApi
 * @extends {BaseAPI}
 */
export class StudentControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a student
     * @param {StudentDTO} student student
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public addStudentUsingPOST(student: StudentDTO, options?: any) {
        return StudentControllerApiFp(this.configuration).addStudentUsingPOST(student, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a student with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public deleteStudentUsingDELETE(id: number, options?: any) {
        return StudentControllerApiFp(this.configuration).deleteStudentUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the list of all students
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public getAllUsingGET13(options?: any) {
        return StudentControllerApiFp(this.configuration).getAllUsingGET13(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns a list of application of student with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public getApplicationsUsingGET(id: number, options?: any) {
        return StudentControllerApiFp(this.configuration).getApplicationsUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a student with a specific id
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public getOneUsingGET13(id: number, options?: any) {
        return StudentControllerApiFp(this.configuration).getOneUsingGET13(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns the cv of a student
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public getStudentCvUsingGET(id: number, options?: any) {
        return StudentControllerApiFp(this.configuration).getStudentCvUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a student with a specific id
     * @param {number} id id
     * @param {StudentDTO} student student
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public updateStudentUsingPUT(id: number, student: StudentDTO, options?: any) {
        return StudentControllerApiFp(this.configuration).updateStudentUsingPUT(id, student, options)(this.fetch, this.basePath);
    }

}

/**
 * UserControllerApi - fetch parameter creator
 * @export
 */
export const UserControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addUser
         * @param {string} [password] 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserUsingPOST(password?: string, userName?: string, options: any = {}): FetchArgs {
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findUser
         * @param {string} [user] user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUserUsingGET(user?: string, options: any = {}): FetchArgs {
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addUser
         * @param {string} [password] 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserUsingPOST(password?: string, userName?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).addUserUsingPOST(password, userName, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary findUser
         * @param {string} [user] user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUserUsingGET(user?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).findUserUsingGET(user, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary addUser
         * @param {string} [password] 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserUsingPOST(password?: string, userName?: string, options?: any) {
            return UserControllerApiFp(configuration).addUserUsingPOST(password, userName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary findUser
         * @param {string} [user] user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUserUsingGET(user?: string, options?: any) {
            return UserControllerApiFp(configuration).findUserUsingGET(user, options)(fetch, basePath);
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @summary addUser
     * @param {string} [password] 
     * @param {string} [userName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public addUserUsingPOST(password?: string, userName?: string, options?: any) {
        return UserControllerApiFp(this.configuration).addUserUsingPOST(password, userName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary findUser
     * @param {string} [user] user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public findUserUsingGET(user?: string, options?: any) {
        return UserControllerApiFp(this.configuration).findUserUsingGET(user, options)(this.fetch, this.basePath);
    }

}

